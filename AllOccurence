//find total number of occurence in an given array 

//we have to approach to solve this problem 

// 1-linear search in this we have to traverse to the whole array and find the targer but in this worst case time complexity is O(n),so we have a better approach to solve this problem named as,

//Binary search in this time complexity is O(log n);

// To calculate the total number of occurence formula is

// TotalNO Occurence= (LastIndex-FirseIndex)+1;

#include <iostream>
using namespace std;


int firstOcc(int *arr, int n, int key)
{
    // s=start,e=end;
    int s = 0, e = n - 1;
    int ans = -1;
    while (s <= e)
    {
        int mid = s + (e - s) / 2; // also use mid= s+e/2; use previous mid to avoid the integer overflow
        if (arr[mid] == key)
        {
            ans = mid;
            e = mid - 1;// for first occurence
        }
        // key badi hai toh right ,key choti hai toh left
        else if (key > arr[mid])
        {
            s = mid + 1;
        }
        else if (key < arr[mid])
        {
            e = mid - 1;
        }
    }
    return ans;
}

int lastOcc(int *arr, int n, int key)
{
    // s=start,e=end;
    int s = 0, e = n - 1;
    int ans = -1;
    while (s <= e)
    {
        int mid = s + (e - s) / 2; // also use mid= s+e/2; use previous mid to avoid the integer overflow
        if (arr[mid] == key)
        {
            ans = mid;
            s = mid + 1;// for last occurence
        }
        // key badi hai toh right ,key choti hai toh left
        else if (key > arr[mid])
        {
            s = mid + 1;
        }
        else if (key < arr[mid])
        {
            e = mid - 1;
        }
    }
    return ans;
}



int main()
{
    int arr[5] = {1, 3, 3, 4,6};
    int fs= firstOcc(arr, 5, 3) ;
    cout<<"First Occurence is "<< firstOcc(arr, 5, 3) <<" ";
    int ls= lastOcc(arr, 5, 3);
    cout<<"last Occurence is "<< lastOcc(arr, 5, 3)<<endl;
	// all occurence means 3 hamara 4 baar aa raha hai
	int allocc=(ls-fs)+1;
	cout<<"All Occurence is "<<allocc<<endl;
	

    return 0;
}
